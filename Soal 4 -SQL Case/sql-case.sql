select * from ecommerce_dataset;

# Test Case 1: Channel Analysis
-- Craft an SQL query to ascertain the total revenue generated from each channel grouping 
-- for the top 5 countries producing the highest revenue.
with top_countries as (
	select country from ecommerce_dataset
	group by country
	order by sum(totalTransactionRevenue) 
	desc limit 5
)
select tc.country, ed.channelGrouping, sum(ed.totalTransactionRevenue) as total_revenue 
from top_countries tc left join ecommerce_dataset ed on tc.country=ed.country 
group by tc.country, ed.channelGrouping;

# Test Case 2: User Behavior Analysis
-- Derive insights into user behavior. Calculate metrics like average timeOnSite, average pageviews, 
-- and average sessionQualityDim for each fullVisitorId. Identify users who spend above-average time 
-- on the site but view fewer pages than the average user.
with avg_for_fullvisitorId as (
	select avg(timeOnSite) as avg_time, 
	avg(pageviews) as avg_views, 
	avg(sessionQualityDim) as avg_session
	from ecommerce_dataset
)
select fullvisitorId, avg(timeOnSite), avg(pageviews) from ecommerce_dataset 
group by fullVisitorId
order by avg(timeOnSite) desc;

# Test Case 3: Product Performance
-- Understand the performance of each product. Design an SQL query that:
--  a. Computes the total revenue generated by each product (v2ProductName).
select v2ProductName, sum(productRevenue) as total_revenue 
from ecommerce_dataset
group by v2ProductName
order by total_revenue desc;

--  b. Determines the total quantity sold for each product.
select v2ProductName, sum(productQuantity) as total_quantity 
from ecommerce_dataset
group by v2ProductName
order by total_quantity desc;

--  c.Calculates the total refund amount for each product.
select v2ProductName, sum(productRefundAmount) total_refund_amount 
from ecommerce_dataset
group by v2ProductName
order by total_refund_amount desc;

-- Rank products based on their net revenue (total revenue minus refunds) in a descending order. 
-- Flag any product with a refund amount surpassing 10% of its total revenue.
SELECT 
    RANK() OVER (ORDER BY SUM(productRevenue) - COALESCE(SUM(productRefundAmount), 0) DESC) AS Ranking,
    v2ProductName,
    SUM(productRevenue) - COALESCE(SUM(productRefundAmount), 0) AS net_revenue,
    CASE 
        WHEN SUM(productRefundAmount) > 0.1 * SUM(productRevenue) THEN 'Yes' 
        ELSE 'No' 
    END AS refund_exceeds_10_percent
FROM 
    ecommerce_dataset
GROUP BY 
    v2ProductName
ORDER BY 
    net_revenue DESC;